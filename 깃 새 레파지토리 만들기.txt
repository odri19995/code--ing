git 정리 > 최종 정리

먼저 Git hub 아이디를 만들고 레파지토리를 만들었다는 가정 
https://github.com/odri19995/IT-dictionary

Git 설치

1. git 에게 내가 누구인지 알려주기 
(1). 내 이름
$ git config --global user.name "odri19995"
(2) 내 이메일
$ git config --global user.email "odri19995@gmail.com"

2. git 이 내 정보를 잘 알고있나 확인하기
$ git config --list

3. 작업 폴더 가기 cd 이용

cd [작업폴더]

4. git 레파지토리와 로컬과 연결하기

$ git remote add origin https://github.com/odri19995/IT-dictionary
: origin은 원격 저장소 이름이다. 꼭 origin 이라 할 필요는 없다.
만일 origin을 쓰고 싶은데 이미 있을 경우 ...
ex)remote origin already exists.
$git remote remove origin
: origin이라는 원격 저장소를 제거한다. 


5. 보통 레파지토리를 먼저 로컬에 복사해놓고 시작한다. 
/*
레파지토리를 로컬에 가져오는 방법은 두가지가 있는데 git pull과 git clone 두가지가 있다. 
git pull과 git clone은 명백한 차이점이 있다.

먼저, git clone명령을 사용하면 로컬 저장소의 내용이 원격 저장소의 내용과 일치해진다.

기존에 작업중이었던 사람이 git명령을 사용해서 원격 저장소의 내용을 그대로 가져와버리면 기존에 작업했던 내용들은 직접 복구해야 한다. 즉, git clone은 프로젝트에 처음 투입될 때 사용되어야 하는 명령인 것이다.

반면 git pull명령은 원격 저장소의 내용을 가져와서 현재 브랜치와 병합(merge)까지 해주기 때문에, 기존에 작업했던 내용은 유지하면서 최신 코드로 업데이트할 수 있는 것이다.
*/

막 만든 레퍼지토리에  README.md 하나만 만들어 놓았다. 

$git pull https://github.com/odri19995/IT-dictionary.git
or 
$git pull origin main

만일 pull 명령 실행시 이런 문구와 함께 진행되지 않는다면, 다음의 명령으로 실행한다.
 refusing to merge unrelated histories
$git pull origin 브런치명 --allow-unrelated-histories
이 명령 옵션은 이미 존재하는 두 프로젝트의 기록(history)을 저장하는 드문 상황에 사용된다고 한다. 즉, git에서는 서로 관련 기록이 없는 이질적인 두 프로젝트를 병합할 때 기본적으로 거부하는데, 이것을 허용해 주는 것이다.

여기까지 왔다면 자기가 원하는 폴더에 README.md가 생성된걸 확인할 수 있다. 

6. 로컬 폴더에 test.txt를 만들고 깃에 올려보자.
git bash -> $ls(폴더 확인)
cmd -> dir(폴더 확인)
$git add test.txt
test.txt를 추가 한다.

$git add .
폴더 전체를 추가한다.  
$git commit -m " (커밋내용)"
바뀐 내용에 대하여 설명을 쓴다.
$git push origin main/master
$git push https://github.com/odri19995/IT-dictionary.git (remote 안했을시) 
! brunch 이름은 동일해야한다. 

$git push origin +main/+master 
이렇게 하면 
변경 내용만 반영되는 것이 아니라,
소스 "전체"가 push 되어 버린다.
(기존 데이터 손실 위험)
=> 협업 중에 이 방법을 쓰면
팀원 소스가 덧씌워져서 날아갈 수 있다.
 


